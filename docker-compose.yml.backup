version: '3.8'

services:
  # Application Flask avec HuntKit intégré
  app:
    build: 
      context: .
      dockerfile: Dockerfile  # Utilise le nouveau Dockerfile HuntKit allégé
    command: python backend/app.py
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - SECRET_KEY=your-secret-key-here
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - GRAYLOG_HOST=graylog
      - GRAYLOG_PORT=12201
      # Variables PostgreSQL
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=toolbox
      - DB_USER=toolbox_user
      - DB_PASSWORD=toolbox_password
      # Variables pour outils HuntKit
      - TOOLS_DIR=/opt
      - WORDLISTS_DIR=/usr/share/wordlists
    depends_on:
      - redis
      - postgres
      - graylog
      - minio
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.2
    volumes:
      - .:/app
      - tools_data:/opt
      - wordlists_data:/usr/share/wordlists
    container_name: toolbox-app-huntkit

  # Worker Celery avec accès aux outils HuntKit
  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    working_dir: /app/backend
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - GRAYLOG_HOST=graylog
      - GRAYLOG_PORT=12201
      # Variables PostgreSQL pour le worker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=toolbox
      - DB_USER=toolbox_user
      - DB_PASSWORD=toolbox_password
      # Variables pour outils HuntKit
      - TOOLS_DIR=/opt
      - WORDLISTS_DIR=/usr/share/wordlists
    depends_on:
      - redis
      - postgres
      - app
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.3
    volumes:
      - .:/app
      - tools_data:/opt
      - wordlists_data:/usr/share/wordlists
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "toolbox-worker-huntkit"
    container_name: toolbox-worker-huntkit

  # Flower (monitoring Celery)
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    working_dir: /app/backend
    command: celery -A celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - worker
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.4
    volumes:
      - .:/app
    container_name: toolbox-flower

  # Redis (broker Celery)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.20
    container_name: toolbox-redis

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=toolbox
      - POSTGRES_USER=toolbox_user
      - POSTGRES_PASSWORD=toolbox_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.21
    container_name: toolbox-postgres

  # MongoDB pour Graylog
  mongo:
    image: mongo:5.0
    volumes:
      - mongo_data:/data/db
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.30
    container_name: toolbox-mongo
    restart: unless-stopped

  # Elasticsearch pour Graylog
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"  # ← AUGMENTATION MÉMOIRE
      - discovery.type=single-node
      - cluster.name=graylog
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g  # ← AUGMENTATION LIMITE MÉMOIRE
    ports:
      - "9200:9200"  # ← AJOUT DU PORT POUR DIAGNOSTIC
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data  # ← PERSISTANCE
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.31
    container_name: toolbox-elasticsearch
    restart: unless-stopped  # ← REDÉMARRAGE AUTO
    healthcheck:  # ← AJOUT HEALTHCHECK
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Graylog pour centralisation des logs
  graylog:
    image: graylog/graylog:4.3
    environment:
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
      - GRAYLOG_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - GRAYLOG_MONGODB_URI=mongodb://mongo/graylog
      - GRAYLOG_SERVER_JAVA_OPTS=-Xms1g -Xmx1g -XX:NewRatio=1 -server -XX:+ResizeTLAB -XX:+UseConcMarkSweepGC -XX:+CMSConcurrentMTEnabled -XX:+CMSClassUnloadingEnabled -XX:+UseParNewGC -XX:-OmitStackTraceInFastThrow
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    volumes:
      - graylog_data:/usr/share/graylog/data
      - graylog_journal:/usr/share/graylog/data/journal
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.32
    restart: unless-stopped
    depends_on:
      - mongo
      - elasticsearch
    ports:
      - "9000:9000"      # Interface web Graylog
      - "1514:1514"      # Syslog
      - "1514:1514/udp"  # Syslog UDP
      - "12201:12201"    # GELF
      - "12201:12201/udp" # GELF UDP
    container_name: toolbox-graylog

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9090:9000"    # API S3 (éviter conflit avec Graylog 9000)
      - "9091:9001"    # Console web MinIO
    environment:
      - MINIO_ROOT_USER=toolbox_admin
      - MINIO_ROOT_PASSWORD=toolbox_secret_2024
    volumes:
      - minio_data:/data
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.40
    container_name: toolbox-minio

  # DVWA (Damn Vulnerable Web Application) pour tests
  dvwa:
    image: vulnerables/web-dvwa
    ports:
      - "8080:80"
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.10
    container_name: toolbox-dvwa

  # NOUVEAU : Conteneur pour tests d'outils (optionnel)
  tools-test:
    build: 
      context: .
      dockerfile: Dockerfile
    command: /bin/bash -c "while true; do sleep 3600; done"  # Keep alive
    networks:
      toolbox-network:
        ipv4_address: 172.20.0.99
    volumes:
      - .:/app
      - tools_data:/opt
      - wordlists_data:/usr/share/wordlists
    container_name: toolbox-tools-test
    profiles:
      - testing  # Démarré seulement avec --profile testing

networks:
  toolbox-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
  tools_data:
  wordlists_data:
  minio_data:
  graylog_data:
  graylog_journal:
  mongo_data:
  elasticsearch_data:
