# =============================================================================
# G√âN√âRATEUR DE RAPPORTS AM√âLIOR√âS
# =============================================================================

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.colors import HexColor
from jinja2 import Template
import json
from datetime import datetime
import os

class ImprovedReportExporter:
    """G√©n√©rateur de rapports de t√¢ches am√©lior√©s"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        """Cr√©er des styles personnalis√©s pour les PDF"""
        
        # Style pour les titres
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=20,
            textColor=HexColor('#2c3e50'),
            alignment=1  # Centr√©
        ))
        
        # Style pour les sous-titres
        self.styles.add(ParagraphStyle(
            name='CustomHeading',
            parent=self.styles['Heading2'], 
            fontSize=14,
            spaceAfter=12,
            textColor=HexColor('#34495e'),
            borderWidth=1,
            borderColor=HexColor('#bdc3c7'),
            borderPadding=5
        ))
        
        # Style pour le contenu normal
        self.styles.add(ParagraphStyle(
            name='CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            leftIndent=10
        ))

    def generate_discovery_report(self, task_data, format='both'):
        """G√©n√©rer rapport de d√©couverte r√©seau am√©lior√©"""
        
        report_data = {
            'task_id': task_data.get('task_id', 'N/A'),
            'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            'target': task_data.get('target', 'N/A'),
            'scan_type': task_data.get('scan_type', 'D√©couverte r√©seau'),
            'duration': task_data.get('duration', '< 1 minute'),
            'hosts_found': task_data.get('hosts_found', []),
            'total_hosts': len(task_data.get('hosts_found', [])),
            'services': task_data.get('services', []),
            'vulnerabilities': task_data.get('vulnerabilities', []),
            'raw_output': task_data.get('raw_output', '')
        }
        
        reports = {}
        
        if format in ['txt', 'both']:
            reports['txt_content'] = self.generate_txt_report(report_data)
        
        if format in ['pdf', 'both']:
            reports['pdf_path'] = self.generate_pdf_report(report_data)
        
        return reports


    def generate_txt_report(self, data):
        """G√©n√©ration rapport texte adaptatif selon le type d'analyse"""
        
        # D√©terminer le type d'analyse
        scan_type = data.get('scan_type', 'Analyse g√©n√©rale')
        
        # Template adaptatif selon le type
        if 'web_audit' in scan_type or 'audit_web' in scan_type:
            template_str = self._get_web_audit_template()
        elif 'forensic' in scan_type or 'forensique' in scan_type:
            template_str = self._get_forensic_template()
        elif 'brute_force' in scan_type or 'force_brute' in scan_type:
            template_str = self._get_brute_force_template()
        else:
            template_str = self._get_discovery_template()
        
        from jinja2 import Template
        template = Template(template_str)
        return template.render(**data)
    
    def _get_web_audit_template(self):
        """Template pour audit web"""
        return """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                      RAPPORT D'AUDIT WEB                        ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üìã INFORMATIONS G√âN√âRALES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ ID de t√¢che    : {{ task_id }}
      ‚Ä¢ Date/Heure     : {{ timestamp }}
      ‚Ä¢ Cible          : {{ target }}
      ‚Ä¢ Type d'audit   : {{ scan_type }}
      ‚Ä¢ Dur√©e          : {{ duration }}
    
    üìä R√âSUM√â EX√âCUTIF
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ Applications web analys√©es : {{ total_hosts }}
      ‚Ä¢ Services web identifi√©s    : {{ services|length }}
      ‚Ä¢ Vuln√©rabilit√©s d√©tect√©es   : {{ vulnerabilities|length }}
    
    {% if hosts_found %}
    üåê APPLICATIONS WEB ANALYS√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for host in hosts_found %}
    ‚îå‚îÄ {{ host.ip or host.address }}
    ‚îú‚îÄ √âtat         : {{ host.status }}
    ‚îú‚îÄ Type         : {{ host.os or 'Application Web' }}
    ‚îî‚îÄ Ports web    : {{ host.open_ports|join(', ') if host.open_ports else 'HTTP/HTTPS' }}
    
    {% endfor %}
    {% endif %}
    
    {% if services %}
    üîß SERVICES WEB IDENTIFI√âS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for service in services %}
    ‚îå‚îÄ {{ service.name }} (Port {{ service.port }})
    ‚îú‚îÄ Version      : {{ service.version or 'Non identifi√©e' }}
    ‚îú‚îÄ Protocole    : {{ service.protocol }}
    ‚îú‚îÄ √âtat         : {{ service.state }}
    ‚îî‚îÄ Serveur      : {{ service.host }}
    
    {% endfor %}
    {% endif %}
    
    {% if vulnerabilities %}
    üö® VULN√âRABILIT√âS WEB D√âTECT√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for vuln in vulnerabilities %}
    ‚îå‚îÄ {{ vuln.title }}
    ‚îú‚îÄ Criticit√©    : {{ vuln.severity }}
    ‚îú‚îÄ Source       : {{ vuln.source or 'Scanner Web' }}
    ‚îú‚îÄ Port affect√© : {{ vuln.port }}
    ‚îú‚îÄ Serveur      : {{ vuln.host }}
    ‚îî‚îÄ Description  : {{ vuln.description }}
    
    {% endfor %}
    {% else %}
    üö® VULN√âRABILIT√âS WEB D√âTECT√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    ‚úÖ Aucune vuln√©rabilit√© web critique d√©tect√©e
    {% endif %}
    
    üõ°Ô∏è RECOMMANDATIONS WEB
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% if vulnerabilities %}
    - Corriger en priorit√© les vuln√©rabilit√©s critiques et √©lev√©es
    - Mettre √† jour les composants web avec des versions obsol√®tes
    - Impl√©menter des m√©canismes de protection (WAF, CSP)
    - Auditer les configurations des serveurs web
    {% else %}
    - Bonne configuration de s√©curit√© d√©tect√©e
    - Maintenir les bonnes pratiques actuelles
    - Effectuer des audits r√©guliers pour d√©tecter de nouvelles vuln√©rabilit√©s
    {% endif %}
    
    {% if raw_output %}
    üíª D√âTAILS TECHNIQUES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {{ raw_output }}
    {% endif %}
    
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    Audit web g√©n√©r√© par la Toolbox Cybers√©curit√© - {{ timestamp }}
    """
    
    def _get_forensic_template(self):
        """Template pour analyse forensique"""
        return """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                   RAPPORT D'ANALYSE FORENSIQUE                  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üìã INFORMATIONS G√âN√âRALES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ ID de t√¢che    : {{ task_id }}
      ‚Ä¢ Date/Heure     : {{ timestamp }}
      ‚Ä¢ √âchantillon    : {{ target }}
      ‚Ä¢ Type d'analyse : {{ scan_type }}
      ‚Ä¢ Dur√©e          : {{ duration }}
    
    üìä R√âSUM√â EX√âCUTIF
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ Artefacts analys√©s         : {{ total_hosts }}
      ‚Ä¢ √âl√©ments identifi√©s        : {{ services|length }}
      ‚Ä¢ Anomalies/Menaces d√©tect√©es: {{ vulnerabilities|length }}
    
    {% if hosts_found %}
    üîç ARTEFACTS ANALYS√âS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for host in hosts_found %}
    ‚îå‚îÄ {{ host.ip or host.address }}
    ‚îú‚îÄ √âtat         : {{ host.status }}
    ‚îú‚îÄ Type         : {{ host.os or 'Artefact num√©rique' }}
    ‚îî‚îÄ √âl√©ments     : {{ host.open_ports|length if host.open_ports else 0 }} √©l√©ments d√©tect√©s
    
    {% endfor %}
    {% endif %}
    
    {% if services %}
    üîß √âL√âMENTS IDENTIFI√âS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for service in services %}
    ‚îå‚îÄ {{ service.name }}
    ‚îú‚îÄ D√©tails      : {{ service.version or 'Information non disponible' }}
    ‚îú‚îÄ Type         : {{ service.protocol }}
    ‚îú‚îÄ √âtat         : {{ service.state }}
    ‚îî‚îÄ Source       : {{ service.host }}
    
    {% endfor %}
    {% endif %}
    
    {% if vulnerabilities %}
    ‚ö†Ô∏è ANOMALIES ET MENACES D√âTECT√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for vuln in vulnerabilities %}
    ‚îå‚îÄ {{ vuln.title }}
    ‚îú‚îÄ Criticit√©    : {{ vuln.severity }}
    ‚îú‚îÄ Source       : {{ vuln.source or 'Analyse Forensique' }}
    ‚îú‚îÄ R√©f√©rence    : {{ vuln.port if vuln.port != 'N/A' else 'Syst√®me' }}
    ‚îú‚îÄ Emplacement  : {{ vuln.host }}
    ‚îî‚îÄ Description  : {{ vuln.description }}
    
    {% endfor %}
    {% else %}
    ‚ö†Ô∏è ANOMALIES ET MENACES D√âTECT√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    ‚úÖ Aucune menace critique d√©tect√©e dans l'analyse
    {% endif %}
    
    üõ°Ô∏è RECOMMANDATIONS FORENSIQUES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% if vulnerabilities %}
    - Analyser en priorit√© les menaces critiques identifi√©es
    - Isoler les syst√®mes compromis si n√©cessaire
    - Collecter des preuves suppl√©mentaires pour investigation
    - Documenter la cha√Æne de possession des preuves
    {% else %}
    - L'analyse n'a r√©v√©l√© aucune menace imm√©diate
    - Conserver les artefacts pour r√©f√©rence future
    - Poursuivre l'investigation si d'autres indices apparaissent
    {% endif %}
    
    {% if raw_output %}
    üíª DONN√âES TECHNIQUES D√âTAILL√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {{ raw_output }}
    {% endif %}
    
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    Analyse forensique g√©n√©r√©e par la Toolbox Cybers√©curit√© - {{ timestamp }}
    """
    
    def _get_brute_force_template(self):
        """Template pour force brute"""
        return """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    RAPPORT DE FORCE BRUTE                       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üìã INFORMATIONS G√âN√âRALES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ ID de t√¢che    : {{ task_id }}
      ‚Ä¢ Date/Heure     : {{ timestamp }}
      ‚Ä¢ Cible          : {{ target }}
      ‚Ä¢ Type d'attaque : {{ scan_type }}
      ‚Ä¢ Dur√©e          : {{ duration }}
    
    üìä R√âSUM√â EX√âCUTIF
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ Syst√®mes test√©s            : {{ total_hosts }}
      ‚Ä¢ Services analys√©s          : {{ services|length }}
      ‚Ä¢ Credentials d√©couverts     : {{ vulnerabilities|selectattr('severity', 'equalto', 'Critical')|list|length }}
    
    {% if hosts_found %}
    üéØ SYST√àMES TEST√âS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for host in hosts_found %}
    ‚îå‚îÄ {{ host.ip or host.address }}
    ‚îú‚îÄ √âtat         : {{ host.status }}
    ‚îú‚îÄ Syst√®me      : {{ host.os or 'Syst√®me test√©' }}
    ‚îî‚îÄ Services     : {{ host.open_ports|join(', ') if host.open_ports else 'N/A' }}
    
    {% endfor %}
    {% endif %}
    
    {% if services %}
    üîß SERVICES ANALYS√âS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for service in services %}
    ‚îå‚îÄ {{ service.name }} (Port {{ service.port }})
    ‚îú‚îÄ √âtat de test : {{ service.state }}
    ‚îú‚îÄ Protocole    : {{ service.protocol }}
    ‚îú‚îÄ R√©sultat     : {{ service.version or 'Test effectu√©' }}
    ‚îî‚îÄ Syst√®me      : {{ service.host }}
    
    {% endfor %}
    {% endif %}
    
    {% if vulnerabilities %}
    üîì CREDENTIALS ET FAILLES D√âCOUVERTES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for vuln in vulnerabilities %}
    ‚îå‚îÄ {{ vuln.title }}
    ‚îú‚îÄ Criticit√©    : {{ vuln.severity }}
    {% if vuln.severity == 'Critical' %}‚îú‚îÄ ‚ö†Ô∏è ACC√àS    : Credentials faibles d√©tect√©s{% endif %}
    ‚îú‚îÄ Service      : Port {{ vuln.port }}
    ‚îú‚îÄ Syst√®me      : {{ vuln.host }}
    ‚îî‚îÄ D√©tails      : {{ vuln.description }}
    
    {% endfor %}
    {% else %}
    üîì CREDENTIALS ET FAILLES D√âCOUVERTES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    ‚úÖ Aucun credential faible d√©tect√© - Services r√©sistants aux attaques
    {% endif %}
    
    üõ°Ô∏è RECOMMANDATIONS S√âCURIT√â
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% set critical_vulns = vulnerabilities|selectattr('severity', 'equalto', 'Critical')|list %}
    {% if critical_vulns %}
    - üö® URGENT: Changer imm√©diatement les mots de passe faibles d√©couverts
    - Impl√©menter une politique de mots de passe robuste
    - Activer l'authentification multi-facteurs (2FA/MFA)
    - Surveiller les tentatives de connexion suspectes
    - Consid√©rer le blocage IP apr√®s √©checs multiples
    {% else %}
    - Excellente r√©sistance aux attaques par force brute
    - Maintenir les politiques de s√©curit√© actuelles
    - Effectuer des tests r√©guliers pour v√©rifier la robustesse
    - Sensibiliser les utilisateurs aux bonnes pratiques
    {% endif %}
    
    {% if raw_output %}
    üíª D√âTAILS TECHNIQUES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {{ raw_output }}
    {% endif %}
    
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    Test de force brute g√©n√©r√© par la Toolbox Cybers√©curit√© - {{ timestamp }}
    """
    
    def _get_discovery_template(self):
        """Template pour d√©couverte r√©seau (existant)"""
        return """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    RAPPORT DE D√âCOUVERTE R√âSEAU                  ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üìã INFORMATIONS G√âN√âRALES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ ID de t√¢che    : {{ task_id }}
      ‚Ä¢ Date/Heure     : {{ timestamp }}
      ‚Ä¢ Cible          : {{ target }}
      ‚Ä¢ Type de scan   : {{ scan_type }}
      ‚Ä¢ Dur√©e          : {{ duration }}
    
    üìä R√âSUM√â EX√âCUTIF
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      ‚Ä¢ H√¥tes d√©couverts     : {{ total_hosts }}
      ‚Ä¢ Services identifi√©s  : {{ services|length }}
      ‚Ä¢ Vuln√©rabilit√©s       : {{ vulnerabilities|length }}
    
    {% if hosts_found %}
    üñ•Ô∏è  H√îTES D√âCOUVERTS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for host in hosts_found %}
    ‚îå‚îÄ {{ host.ip or host.address }}
    ‚îú‚îÄ √âtat         : {{ host.status }}
    {% if host.hostname %}‚îú‚îÄ Nom d'h√¥te   : {{ host.hostname }}{% endif %}
    ‚îú‚îÄ OS d√©tect√©   : {{ host.os or 'Non identifi√©' }}
    ‚îî‚îÄ Ports ouverts: {{ host.open_ports|join(', ') if host.open_ports else 'Aucun' }}
    
    {% endfor %}
    {% endif %}
    
    {% if services %}
    üîß SERVICES IDENTIFI√âS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for service in services %}
    ‚îå‚îÄ {{ service.name }} (Port {{ service.port }})
    ‚îú‚îÄ Version      : {{ service.version or 'Non identifi√©e' }}
    ‚îú‚îÄ Protocole    : {{ service.protocol }}
    ‚îú‚îÄ √âtat         : {{ service.state }}
    ‚îî‚îÄ H√¥te         : {{ service.host }}
    
    {% endfor %}
    {% endif %}
    
    {% if vulnerabilities %}
    üö® VULN√âRABILIT√âS D√âTECT√âES
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% for vuln in vulnerabilities %}
    ‚îå‚îÄ {{ vuln.title }}
    ‚îú‚îÄ Criticit√©    : {{ vuln.severity }}
    ‚îú‚îÄ CVE          : {{ vuln.cve or 'N/A' }}
    ‚îú‚îÄ Port affect√© : {{ vuln.port }}
    ‚îú‚îÄ H√¥te         : {{ vuln.host }}
    ‚îî‚îÄ Description  : {{ vuln.description }}
    
    {% endfor %}
    {% endif %}
    
    üõ°Ô∏è  RECOMMANDATIONS
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {% if vulnerabilities %}
    - Traiter en priorit√© les vuln√©rabilit√©s critiques
    - Mettre √† jour les services identifi√©s avec des versions obsol√®tes
    - V√©rifier la configuration des pare-feu
    {% else %}
    - Aucune vuln√©rabilit√© critique d√©tect√©e
    - Maintenir les pratiques de s√©curit√© actuelles
    {% endif %}
    - Effectuer des scans r√©guliers pour maintenir la visibilit√©
    
    {% if raw_output %}
    üíª SORTIE BRUTE
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    {{ raw_output }}
    {% endif %}
    
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    Rapport g√©n√©r√© par la Toolbox Cybers√©curit√© - {{ timestamp }}
    """


    def generate_pdf_report(self, data):
        """G√©n√©ration rapport PDF professionnel - VERSION COMPL√àTE OPTIMALE"""
        try:
            # G√©n√©rer un nom de fichier unique
            import uuid
            from datetime import datetime
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            unique_id = str(uuid.uuid4())[:8]
            filename = f"rapport-task-{data['task_id']}-{timestamp}-{unique_id}.pdf"
            
            # Cr√©er le r√©pertoire /tmp s'il n'existe pas
            os.makedirs("/tmp", exist_ok=True)
            filepath = f"/tmp/{filename}"
            
            # Import des biblioth√®ques ReportLab
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import inch
            from reportlab.lib import colors
            from reportlab.lib.colors import HexColor
            import logging
            
            logger = logging.getLogger('toolbox.report')
            logger.info(f"üîÑ G√©n√©ration PDF: {filepath}")
            
            # Cr√©er le document PDF
            doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=1*inch)
            story = []
            
            # Styles personnalis√©s
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=18,
                spaceAfter=30,
                alignment=1,  # Centre
                textColor=HexColor('#2c3e50')
            )
            
            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=HexColor('#3498db')
            )
            
            subheading_style = ParagraphStyle(
                'CustomSubHeading',
                parent=styles['Heading3'],
                fontSize=12,
                spaceAfter=8,
                textColor=HexColor('#2c3e50')
            )
            
            # Titre principal
            story.append(Paragraph("üõ°Ô∏è RAPPORT DE D√âCOUVERTE CYBERS√âCURIT√â", title_style))
            story.append(Spacer(1, 0.3*inch))
            
            # Informations g√©n√©rales
            story.append(Paragraph("üìã Informations G√©n√©rales", heading_style))
            
            info_data = [
                ['ID de t√¢che', str(data.get('task_id', 'N/A'))],
                ['Date/Heure', data.get('timestamp', 'N/A')],
                ['Cible', str(data.get('target', 'N/A'))],
                ['Type de scan', data.get('scan_type', 'D√©couverte r√©seau')],
                ['Dur√©e', data.get('duration', 'N/A')]
            ]
            
            info_table = Table(info_data, colWidths=[2*inch, 4*inch])
            info_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), HexColor('#ecf0f1')),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 1, HexColor('#bdc3c7'))
            ]))
            
            story.append(info_table)
            story.append(Spacer(1, 0.2*inch))
            
            # R√©sum√© ex√©cutif
            story.append(Paragraph("üìä R√©sum√© Ex√©cutif", heading_style))
            
            summary_data = [
                ['H√¥tes d√©couverts', str(data.get('total_hosts', 0))],
                ['Services identifi√©s', str(len(data.get('services', [])))],
                ['Vuln√©rabilit√©s', str(len(data.get('vulnerabilities', [])))]
            ]
            
            summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), HexColor('#3498db')),
                ('TEXTCOLOR', (0, 0), (0, -1), colors.white),
                ('BACKGROUND', (1, 0), (1, -1), HexColor('#ecf0f1')),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('GRID', (0, 0), (-1, -1), 1, HexColor('#2980b9'))
            ]))
            
            story.append(summary_table)
            story.append(Spacer(1, 0.3*inch))
            
            # ===== SOLUTION OPTIMALE : D√âTAILS COMPLETS DES H√îTES =====
            if data.get('hosts_found'):
                story.append(Paragraph("üñ•Ô∏è H√¥tes D√©couverts - Analyse D√©taill√©e", heading_style))
                
                for i, host in enumerate(data['hosts_found'][:10]):
                    ip = host.get('ip', host.get('address', 'N/A'))
                    status = host.get('status', 'Unknown')
                    os_info = host.get('os', 'Non identifi√©')
                    hostname = host.get('hostname', '')
                    ports = host.get('open_ports', [])
                    
                    # Titre pour chaque h√¥te
                    host_title = f"H√¥te {i+1}: {ip}"
                    if hostname:
                        host_title += f" ({hostname})"
                    story.append(Paragraph(host_title, subheading_style))
                    
                    # Informations de base
                    basic_info = [
                        ['√âtat', status],
                        ['OS D√©tect√©', os_info],
                        ['Nombre de ports ouverts', str(len(ports)) if ports else '0']
                    ]
                    
                    basic_table = Table(basic_info, colWidths=[2*inch, 4*inch])
                    basic_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (0, -1), HexColor('#ecf0f1')),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                        ('FONTSIZE', (0, 0), (-1, -1), 10),
                        ('GRID', (0, 0), (-1, -1), 1, HexColor('#bdc3c7')),
                        ('LEFTPADDING', (0, 0), (-1, -1), 6),
                        ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                        ('TOPPADDING', (0, 0), (-1, -1), 4),
                        ('BOTTOMPADDING', (0, 0), (-1, -1), 4)
                    ]))
                    
                    story.append(basic_table)
                    story.append(Spacer(1, 0.1*inch))
                    
                    # AFFICHAGE COMPLET DE TOUS LES PORTS
                    if ports and len(ports) > 0:
                        story.append(Paragraph("<b>Ports ouverts d√©tect√©s:</b>", styles['Normal']))
                        
                        # Trier les ports
                        sorted_ports = sorted(ports)
                        
                        # Cat√©gorisation des ports
                        well_known_ports = {
                            21: 'FTP', 22: 'SSH', 23: 'Telnet', 25: 'SMTP', 53: 'DNS',
                            80: 'HTTP', 110: 'POP3', 143: 'IMAP', 443: 'HTTPS', 993: 'IMAPS',
                            995: 'POP3S', 3306: 'MySQL', 5432: 'PostgreSQL', 1433: 'MSSQL',
                            3389: 'RDP', 139: 'NetBIOS', 445: 'SMB', 161: 'SNMP', 389: 'LDAP',
                            636: 'LDAPS', 1521: 'Oracle', 5900: 'VNC', 6000: 'X11', 8080: 'HTTP-Alt',
                            8443: 'HTTPS-Alt', 9090: 'WebSphere', 111: 'Portmapper', 135: 'RPC',
                            2049: 'NFS', 514: 'Shell', 513: 'Login', 512: 'Exec'
                        }
                        
                        # S√©parer ports connus et inconnus
                        known_ports = [(p, well_known_ports[p]) for p in sorted_ports if p in well_known_ports]
                        unknown_ports = [p for p in sorted_ports if p not in well_known_ports]
                        
                        # Afficher les services standards
                        if known_ports:
                            story.append(Paragraph("<b>Services standards identifi√©s:</b>", styles['Normal']))
                            
                            # Cr√©er tableau pour les services connus
                            services_data = [['Port', 'Service', 'Port', 'Service']]
                            for j in range(0, len(known_ports), 2):
                                row = []
                                # Premier port/service
                                port1, service1 = known_ports[j]
                                row.extend([str(port1), service1])
                                
                                # Deuxi√®me port/service (si disponible)
                                if j + 1 < len(known_ports):
                                    port2, service2 = known_ports[j + 1]
                                    row.extend([str(port2), service2])
                                else:
                                    row.extend(['', ''])
                                
                                services_data.append(row)
                            
                            services_table = Table(services_data, colWidths=[0.7*inch, 1.3*inch, 0.7*inch, 1.3*inch])
                            services_table.setStyle(TableStyle([
                                ('BACKGROUND', (0, 0), (-1, 0), HexColor('#27ae60')),
                                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                                ('FONTSIZE', (0, 0), (-1, -1), 9),
                                ('GRID', (0, 0), (-1, -1), 1, HexColor('#bdc3c7')),
                                ('LEFTPADDING', (0, 0), (-1, -1), 4),
                                ('RIGHTPADDING', (0, 0), (-1, -1), 4),
                                ('TOPPADDING', (0, 0), (-1, -1), 3),
                                ('BOTTOMPADDING', (0, 0), (-1, -1), 3)
                            ]))
                            
                            story.append(services_table)
                            story.append(Spacer(1, 0.05*inch))
                        
                        # Afficher les autres ports
                        if unknown_ports:
                            story.append(Paragraph("<b>Autres ports ouverts:</b>", styles['Normal']))
                            
                            # Cr√©er tableau multi-colonnes pour tous les autres ports
                            ports_per_column = 8
                            num_columns = min(6, (len(unknown_ports) + ports_per_column - 1) // ports_per_column)
                            
                            # Organiser les ports en colonnes
                            columns = []
                            for col in range(num_columns):
                                start_idx = col * ports_per_column
                                end_idx = min(start_idx + ports_per_column, len(unknown_ports))
                                if start_idx < len(unknown_ports):
                                    columns.append(unknown_ports[start_idx:end_idx])
                            
                            # Cr√©er les donn√©es du tableau
                            max_rows = max(len(col) for col in columns) if columns else 0
                            ports_data = []
                            
                            for row in range(max_rows):
                                row_data = []
                                for col in columns:
                                    if row < len(col):
                                        row_data.append(str(col[row]))
                                    else:
                                        row_data.append('')
                                ports_data.append(row_data)
                            
                            if ports_data:
                                # Calculer largeur des colonnes
                                col_width = 6*inch / len(columns)
                                
                                ports_table = Table(ports_data, colWidths=[col_width] * len(columns))
                                ports_table.setStyle(TableStyle([
                                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                                    ('FONTNAME', (0, 0), (-1, -1), 'Courier-Bold'),
                                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                                    ('GRID', (0, 0), (-1, -1), 0.5, HexColor('#ddd')),
                                    ('BACKGROUND', (0, 0), (-1, -1), HexColor('#f8f9fa')),
                                    ('LEFTPADDING', (0, 0), (-1, -1), 3),
                                    ('RIGHTPADDING', (0, 0), (-1, -1), 3),
                                    ('TOPPADDING', (0, 0), (-1, -1), 2),
                                    ('BOTTOMPADDING', (0, 0), (-1, -1), 2)
                                ]))
                                
                                story.append(ports_table)
                        
                        # R√©sum√© total des ports pour cet h√¥te
                        total_summary = f"<b>Total: {len(sorted_ports)} ports ouverts</b> "
                        if known_ports:
                            total_summary += f"({len(known_ports)} services identifi√©s, {len(unknown_ports)} autres ports)"
                        story.append(Paragraph(total_summary, styles['Normal']))
                        
                    else:
                        story.append(Paragraph("Aucun port ouvert d√©tect√©", styles['Normal']))
                    
                    story.append(Spacer(1, 0.2*inch))
            
            # Services identifi√©s (section s√©par√©e si des donn√©es services sont disponibles)
            if data.get('services'):
                story.append(Paragraph("üîß Services Identifi√©s par Scan", heading_style))
                
                services_data = [['Service', 'Port', 'Version', 'H√¥te']]
                for service in data['services'][:20]:  # Limiter √† 20 services d√©taill√©s
                    name = service.get('name', 'N/A')
                    port = str(service.get('port', 'N/A'))
                    version = service.get('version', 'Non identifi√©e')
                    host = service.get('host', 'N/A')
                    
                    # Limiter la longueur pour √©viter le d√©bordement
                    name_display = name[:20] + "..." if len(name) > 20 else name
                    version_display = version[:30] + "..." if len(version) > 30 else version
                    host_display = host[:25] + "..." if len(host) > 25 else host
                    
                    services_data.append([name_display, port, version_display, host_display])
                
                services_table = Table(services_data, colWidths=[1.3*inch, 0.7*inch, 2.2*inch, 1.8*inch])
                services_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), HexColor('#27ae60')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 1, HexColor('#bdc3c7')),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, HexColor('#f8f9fa')]),
                    ('LEFTPADDING', (0, 0), (-1, -1), 4),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 4),
                    ('TOPPADDING', (0, 0), (-1, -1), 4),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 6)
                ]))
                
                story.append(services_table)
                story.append(Spacer(1, 0.2*inch))
            
            # Vuln√©rabilit√©s d√©tect√©es
            if data.get('vulnerabilities'):
                story.append(Paragraph("üö® Vuln√©rabilit√©s D√©tect√©es", heading_style))
                
                vulns_data = [['Titre', 'Criticit√©', 'CVE', 'H√¥te']]
                for vuln in data['vulnerabilities'][:15]:
                    title = vuln.get('title', 'N/A')
                    severity = vuln.get('severity', 'N/A')
                    cve = vuln.get('cve', 'N/A')
                    host = vuln.get('host', 'N/A')
                    
                    title_display = title[:40] + "..." if len(title) > 40 else title
                    cve_display = cve[:15] + "..." if len(cve) > 15 else cve
                    host_display = host[:20] + "..." if len(host) > 20 else host
                    
                    vulns_data.append([title_display, severity, cve_display, host_display])
                
                vulns_table = Table(vulns_data, colWidths=[2.7*inch, 0.8*inch, 1.2*inch, 1.3*inch])
                vulns_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), HexColor('#e74c3c')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 1, HexColor('#bdc3c7')),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, HexColor('#f8f9fa')]),
                    ('LEFTPADDING', (0, 0), (-1, -1), 4),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 4),
                    ('TOPPADDING', (0, 0), (-1, -1), 4),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 6)
                ]))
                
                story.append(vulns_table)
                story.append(Spacer(1, 0.2*inch))
            
            # Recommandations
            story.append(Paragraph("üõ°Ô∏è Recommandations", heading_style))
            recommendations = [
                "‚Ä¢ Effectuer des scans r√©guliers pour maintenir la visibilit√© sur l'infrastructure",
                "‚Ä¢ V√©rifier la configuration des pare-feu et fermer les ports non n√©cessaires",
                "‚Ä¢ Surveiller les services expos√©s et maintenir leurs versions √† jour",
                "‚Ä¢ Impl√©menter une surveillance continue des nouveaux h√¥tes et services"
            ]
            
            if data.get('vulnerabilities'):
                recommendations.insert(0, "‚Ä¢ Traiter en priorit√© les vuln√©rabilit√©s critiques et √† haut risque d√©tect√©es")
            
            for rec in recommendations:
                story.append(Paragraph(rec, styles['Normal']))
            
            # Pied de page
            story.append(Spacer(1, 0.5*inch))
            footer_text = f"Rapport g√©n√©r√© par la Toolbox Cybers√©curit√© - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
            story.append(Paragraph(footer_text, styles['Normal']))
            
            # G√©n√©rer le PDF
            doc.build(story)
            
            logger.info(f"‚úÖ PDF g√©n√©r√© avec succ√®s: {filepath}")
            logger.info(f"üìè Taille du fichier: {os.path.getsize(filepath)} bytes")
            
            # Retourner le chemin pour t√©l√©chargement
            return f"/tasks/api/download-pdf/{filename}"
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration PDF: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise e
