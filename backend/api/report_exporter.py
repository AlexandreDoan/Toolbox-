# =============================================================================
# G√âN√âRATEUR DE RAPPORTS AM√âLIOR√âS
# =============================================================================

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.colors import HexColor
from jinja2 import Template
import json
from datetime import datetime
import os

class ImprovedReportExporter:
    """G√©n√©rateur de rapports de t√¢ches am√©lior√©s"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        """Cr√©er des styles personnalis√©s pour les PDF"""
        
        # Style pour les titres
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=20,
            textColor=HexColor('#2c3e50'),
            alignment=1  # Centr√©
        ))
        
        # Style pour les sous-titres
        self.styles.add(ParagraphStyle(
            name='CustomHeading',
            parent=self.styles['Heading2'], 
            fontSize=14,
            spaceAfter=12,
            textColor=HexColor('#34495e'),
            borderWidth=1,
            borderColor=HexColor('#bdc3c7'),
            borderPadding=5
        ))
        
        # Style pour le contenu normal
        self.styles.add(ParagraphStyle(
            name='CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            leftIndent=10
        ))

    def generate_discovery_report(self, task_data, format='both'):
        """G√©n√©rer rapport de d√©couverte r√©seau am√©lior√©"""
        
        report_data = {
            'task_id': task_data.get('task_id', 'N/A'),
            'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            'target': task_data.get('target', 'N/A'),
            'scan_type': task_data.get('scan_type', 'D√©couverte r√©seau'),
            'duration': task_data.get('duration', '< 1 minute'),
            'hosts_found': task_data.get('hosts_found', []),
            'total_hosts': len(task_data.get('hosts_found', [])),
            'services': task_data.get('services', []),
            'vulnerabilities': task_data.get('vulnerabilities', []),
            'raw_output': task_data.get('raw_output', '')
        }
        
        reports = {}
        
        if format in ['txt', 'both']:
            reports['txt_content'] = self.generate_txt_report(report_data)
        
        if format in ['pdf', 'both']:
            reports['pdf_path'] = self.generate_pdf_report(report_data)
        
        return reports

    def generate_txt_report(self, data):
        """G√©n√©ration rapport texte am√©lior√©"""
        
        template_str = """‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    RAPPORT DE D√âCOUVERTE R√âSEAU                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã INFORMATIONS G√âN√âRALES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  ‚Ä¢ ID de t√¢che    : {{ task_id }}
  ‚Ä¢ Date/Heure     : {{ timestamp }}
  ‚Ä¢ Cible          : {{ target }}
  ‚Ä¢ Type de scan   : {{ scan_type }}
  ‚Ä¢ Dur√©e          : {{ duration }}

üìä R√âSUM√â EX√âCUTIF
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  ‚Ä¢ H√¥tes d√©couverts     : {{ total_hosts }}
  ‚Ä¢ Services identifi√©s  : {{ services|length }}
  ‚Ä¢ Vuln√©rabilit√©s       : {{ vulnerabilities|length }}

{% if hosts_found %}
üñ•Ô∏è  H√îTES D√âCOUVERTS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{% for host in hosts_found %}
‚îå‚îÄ {{ host.ip or host.address }}
‚îú‚îÄ √âtat         : {{ host.status }}
{% if host.hostname %}‚îú‚îÄ Nom d'h√¥te   : {{ host.hostname }}{% endif %}
‚îú‚îÄ OS d√©tect√©   : {{ host.os or 'Non identifi√©' }}
‚îî‚îÄ Ports ouverts: {{ host.open_ports|join(', ') if host.open_ports else 'Aucun' }}

{% endfor %}
{% endif %}

{% if services %}
üîß SERVICES IDENTIFI√âS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{% for service in services %}
‚îå‚îÄ {{ service.name }} (Port {{ service.port }})
‚îú‚îÄ Version      : {{ service.version or 'Non identifi√©e' }}
‚îú‚îÄ Protocole    : {{ service.protocol }}
‚îî‚îÄ √âtat         : {{ service.state }}

{% endfor %}
{% endif %}

{% if vulnerabilities %}
üö® VULN√âRABILIT√âS D√âTECT√âES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{% for vuln in vulnerabilities %}
‚îå‚îÄ {{ vuln.title }}
‚îú‚îÄ Criticit√©    : {{ vuln.severity }}
‚îú‚îÄ CVE          : {{ vuln.cve or 'N/A' }}
‚îú‚îÄ Port affect√© : {{ vuln.port }}
‚îî‚îÄ Description  : {{ vuln.description }}

{% endfor %}
{% endif %}

{% if raw_output %}
üíª SORTIE BRUTE
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{{ raw_output }}
{% endif %}

üõ°Ô∏è  RECOMMANDATIONS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{% if vulnerabilities %}
- Traiter en priorit√© les vuln√©rabilit√©s critiques
- Mettre √† jour les services identifi√©s avec des versions obsol√®tes
- V√©rifier la configuration des pare-feu
{% else %}
- Aucune vuln√©rabilit√© critique d√©tect√©e
- Maintenir les pratiques de s√©curit√© actuelles
{% endif %}
- Effectuer des scans r√©guliers pour maintenir la visibilit√©

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Rapport g√©n√©r√© par la Toolbox Cybers√©curit√© - {{ timestamp }}
        """
        
        template = Template(template_str)
        return template.render(**data)

    def generate_pdf_report(self, data):
        """G√©n√©ration rapport PDF professionnel"""
        
        filename = f"rapport-task-{data['task_id']}-{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = f"/tmp/{filename}"
        
        doc = SimpleDocTemplate(filepath, pagesize=A4, topMargin=1*inch)
        story = []
        
        # Titre principal
        story.append(Paragraph("RAPPORT DE T√ÇCHE CYBERS√âCURIT√â", self.styles['CustomTitle']))
        story.append(Spacer(1, 0.3*inch))
        
        # Informations g√©n√©rales
        story.append(Paragraph("üìã Informations G√©n√©rales", self.styles['CustomHeading']))
        
        info_data = [
            ['ID de t√¢che', str(data['task_id'])],
            ['Date/Heure', data['timestamp']],
            ['Cible', str(data['target'])],
            ['Type de scan', data['scan_type']],
            ['Dur√©e', data['duration']]
        ]
        
        info_table = Table(info_data, colWidths=[2*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), HexColor('#ecf0f1')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, HexColor('#bdc3c7'))
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 0.2*inch))
        
        # R√©sum√© ex√©cutif
        story.append(Paragraph("üìä R√©sum√© Ex√©cutif", self.styles['CustomHeading']))
        
        summary_data = [
            ['H√¥tes d√©couverts', str(data['total_hosts'])],
            ['Services identifi√©s', str(len(data['services']))],
            ['Vuln√©rabilit√©s', str(len(data['vulnerabilities']))]
        ]
        
        summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), HexColor('#3498db')),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.white),
            ('BACKGROUND', (1, 0), (1, -1), HexColor('#ecf0f1')),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, HexColor('#2980b9'))
        ]))
        
        story.append(summary_table)
        story.append(Spacer(1, 0.3*inch))
        
        # G√©n√©rer le PDF
        doc.build(story)
        return f"/api/download-pdf/{filename}"
