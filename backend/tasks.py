from celery_app import celery_app
from celery import current_task
import logging
import time
from typing import Dict, Any

logger = logging.getLogger(__name__)

# ===== ACC√àS √Ä LA BASE DE DONN√âES =====
def get_db_manager():
    """Acc√®s simplifi√© au gestionnaire de base de donn√©es"""
    try:
        from database import DatabaseManager
        from config import config
        
        config_obj = config.get('development', config['default'])
        return DatabaseManager(config_obj.DATABASE_PATH)
    except Exception as e:
        logger.error(f"‚ùå Erreur acc√®s BDD dans Celery: {e}")
        return None

# ===== T√ÇCHE TEST =====
@celery_app.task(bind=True, name='tasks.test_task')
def test_task(self, duration: int = 10):
    """T√¢che de test pour v√©rifier Celery"""
    db = get_db_manager()
    if not db:
        raise Exception("Impossible d'acc√©der √† la base de donn√©es")
    
    try:
        logger.info(f"üß™ [Celery] Test task d√©marr√©: {duration}s")
        
        db.update_task_status(
            task_id=self.request.id,
            status='running',
            progress=0
        )
        
        for i in range(duration):
            time.sleep(1)
            progress = int((i + 1) / duration * 100)
            
            self.update_state(
                state='PROGRESS',
                meta={
                    'status': f'Test en cours... {i+1}/{duration}',
                    'progress': progress
                }
            )
            
            db.update_task_status(
                task_id=self.request.id,
                status='running',
                progress=progress
            )
        
        result = {
            'task_id': self.request.id,
            'duration': duration,
            'success': True,
            'message': f'Test task termin√© apr√®s {duration} secondes',
            'completed_at': time.time()
        }
        
        db.update_task_status(
            task_id=self.request.id,
            status='completed',
            progress=100,
            result_summary=f'Test de {duration}s termin√© avec succ√®s'
        )
        
        logger.info(f"‚úÖ [Celery] Test task termin√©")
        return result
        
    except Exception as e:
        logger.error(f"üí• [Celery] Exception test task: {e}")
        
        db.update_task_status(
            task_id=self.request.id,
            status='failed',
            error_message=str(e)
        )
        raise

# ===== TEMPLATE POUR FUTURES T√ÇCHES =====
@celery_app.task(bind=True, name='tasks.example_task')
def example_task(self, target: str, options: Dict = None):
    """Template pour futures t√¢ches de modules"""
    db = get_db_manager()
    if not db:
        raise Exception("Impossible d'acc√©der √† la base de donn√©es")
    
    try:
        logger.info(f"üîß [Celery] Exemple de t√¢che pour: {target}")
        
        # Mise √† jour du statut
        db.update_task_status(
            task_id=self.request.id,
            status='running',
            progress=0
        )
        
        self.update_state(
            state='PROGRESS',
            meta={'status': 'Initialisation...', 'progress': 10, 'target': target}
        )
        
        # Simulation de travail
        for i in range(5):
            time.sleep(1)
            progress = 20 + (i * 16)
            
            self.update_state(
                state='PROGRESS',
                meta={
                    'status': f'√âtape {i+1}/5',
                    'progress': progress,
                    'target': target
                }
            )
            
            db.update_task_status(
                task_id=self.request.id,
                status='running',
                progress=progress
            )
        
        # R√©sultat final
        result = {
            'task_id': self.request.id,
            'target': target,
            'success': True,
            'message': 'T√¢che exemple termin√©e',
            'completed_at': time.time(),
            'data': {
                'example_field': 'example_value',
                'target': target,
                'options': options or {}
            }
        }
        
        db.update_task_status(
            task_id=self.request.id,
            status='completed',
            progress=100,
            result_summary=f'T√¢che exemple termin√©e pour {target}'
        )
        
        logger.info(f"‚úÖ [Celery] T√¢che exemple termin√©e")
        return result
        
    except Exception as e:
        logger.error(f"üí• [Celery] Exception t√¢che exemple: {e}")
        
        db.update_task_status(
            task_id=self.request.id,
            status='failed',
            error_message=str(e)
        )
        raise

# ===== UTILITAIRE =====
def get_task_status(task_id: str) -> Dict[str, Any]:
    """R√©cup√©rer le statut d'une t√¢che Celery"""
    try:
        task = celery_app.AsyncResult(task_id)
        
        if task.state == 'PENDING':
            return {'state': 'PENDING', 'status': 'En attente...', 'progress': 0}
        elif task.state == 'PROGRESS':
            return {
                'state': 'PROGRESS',
                'status': task.info.get('status', 'En cours...'),
                'progress': task.info.get('progress', 0),
                'meta': task.info
            }
        elif task.state == 'SUCCESS':
            return {
                'state': 'SUCCESS',
                'status': 'Termin√© avec succ√®s',
                'progress': 100,
                'result': task.result
            }
        elif task.state == 'FAILURE':
            return {
                'state': 'FAILURE',
                'status': 'Erreur',
                'progress': 0,
                'error': str(task.info)
            }
        else:
            return {'state': task.state, 'status': 'Statut inconnu', 'progress': 0}
            
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration statut t√¢che {task_id}: {e}")
        return {'state': 'ERROR', 'status': f'Erreur: {str(e)}', 'progress': 0}
